<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Secure Automation Dashboard</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css" integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">

  <link rel="stylesheet" href="https://cdn.datatables.net/1.10.23/css/jquery.dataTables.min.css">
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
  <script src="https://cdn.datatables.net/1.10.23/js/jquery.dataTables.min.js"></script>


  <style>
    .tabs{
      display: flex;
      justify-content: space-between;
      margin-bottom: 20px;
    }
    .tab{
      padding: 10px 20px;
      border-radius: 5px;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }
    .tab:hover{
      background-color: rgba(255, 255, 255, 0.2);
    }
  body {
    margin: 0;
    padding: 0;
    background-color: #1d2634;
    color: #9e9ea4;
    font-family: 'Montserrat', 'sans-serif';
  }

  .grid-container {
    display: grid;
    grid-template-columns: 260px 1fr 1fr 1fr;
    grid-template-rows: 60px 1fr;
    grid-template-areas: 'sidebar header header header' 'sidebar main main main';
    height: 100vh;
  }

  .icon {
    vertical-align: middle;
    line-height: 1px;
    font-size: 20px;
  }

  .icon_header {
    vertical-align: middle;
    line-height: 1px;
    font-size: 26px;
  }

  .icon,
  .icon_header {
    margin-right: 5px;
  }

  /* Header */

  .header {
    grid-area: header;
    height: 60px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0 30px;
    box-shadow: 0 6px 7px -3px rgba(0, 0, 0, 0.35);
    background-color: #263043;
    z-index: 2;
  }

  .menu-icon {
    display: none;
  }

  /* End Header */

  /* Sidebar */

  #sidebar {
    grid-area: sidebar;
    background-color: #263043;
    overflow: hidden;
    transition: all 0.5s;
    -webkit-transition: all 0.5s;
    position: fixed;
    /* left: 0; */
    top: 0;
    bottom: 0;
    /* z-index: 1; */
  }

  .sidebar-title {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px 30px 0px 30px;
    margin-bottom: 30px;
  }

  .sidebar-title>span {
    display: none;
  }

  .sidebar-brand {
    margin-top: 15px;
    font-size: 20px;
    font-weight: 700;
    color: #fff; /* Adjust the color as needed */
  }

  .sidebar-list {
    padding: 0;
    list-style-type: none;
  }

  .sidebar-list-item {
    padding: 20px 20px 20px 20px;
    font-size: 18px;
  }

  .sidebar-list-item:hover {
    background-color: rgba(255, 255, 255, 0.2);
    cursor: pointer;
  }

  .sidebar-list-item>a {
    text-decoration: none;
    color: #9e9ea4;
  }

  .sidebar-responsive {
    display: inline !important;
    position: absolute;
    z-index: 12 !important;
  }

  /* End Sidebar  */

  h1 {
    color: #61dafb;
  }

  .form-group {
    margin-bottom: 20px;
    display: inline !important;
    flex-wrap: wrap;

  }

  input[type="date"] {
    width: calc(10% - 10px);
    display:inline-block;
    margin-right: 10px;
    padding: 10px;
    margin-top: 5px;
    border: 1px solid #ddd;
    border-radius: 5px;
    background-color: #fff;
    color: #333;
  }


  button {
    background-color: #61dafb;
    color: #000;
    padding: 10px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    width: 100%;
  }

  .mt-4 {
    margin-top: 20px;
  }

  .list-group-item {
    background-color: #39424e;
    border: 1px solid #333;
    margin-bottom: 5px;
    color: #000;
  }

  #barChart,
  #pieChart,
  #dataTableContainer {
    border: 1px solid #333;
    background-color: #fff;
    margin-top: 10px;
    padding: 20px;
    border-radius: 10px;
    max-height: 400px;
    overflow-y: auto;
  }

  #dataList2Table {
    width: 100%;
    border-collapse: collapse;
    background-color: #39424e;
    color: #fff;
  }

  #dataList2Table.dataTable tbody {
    background-color: #39424e !important;
    color: #000 !important;
  }

  #dataList2Table.dataTable th,
  #dataList2Table.dataTable td {
    border: 1px solid #333 !important;
    padding: 8px !important;
    text-align: left;
  }

  #dataList2Table.dataTable th {
    background-color: #333 !important;
    /* color: #000 !important; */
  }

  #dataList2Table.dataTable_paginate {
    color: #000 !important;
  }

  .main-container {
    grid-area: main;
    overflow: hidden;
    padding: 20px;
    color: rgba(255, 255, 255, 0.95);
    padding-left: 300px;
    /* margin-top: 60px;
    margin-left: 260px; */
    /* position: relative;
    z-index: 0; */
  }

  .main-title {
    display: flex;
    justify-content: space-between;
  }

  .main-cards {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr;
    gap: 20px;
    margin: 15px 0;
  }

  .card {
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    padding: 8px 15px;
    border-radius: 5px;
  }

  .card:first-child {
    background-color: #2962ff;
  }

  .card:nth-child(2) {
    background-color: #ff6d00;
  }

  .card:nth-child(3) {
    background-color: #2e7d32;
  }

  .card:nth-child(4) {
    background-color: #d50000;
  }

  .card-inner {
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .card-inner>.card_icon {
    font-size: 25px;
  }

  .charts {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
    margin-top: 60px;
    height: 200px;
    width: (100% - 500px);
  }
  .custom-submit-btn{
    width: 100px;
  }

 
  .bar-chart-container,
  .pie-chart-container{
    width: 100%;
    box-sizing: border-box;
    margin-bottom: 20px;
  }

  #dataList1 {
    list-style: none;
    padding: 0;
  }

  #dataList1 li {
    margin-bottom: 5px;
    background-color: #39424e;
    border: 1px solid #333;
    color: #000;
    padding: 8px;
  }
</style>

</head>

<body>
  <div id="root">
    <header class='header'>
      <div class='menu-icon'>
        <!-- Replace with your icon component -->
      </div>

      <div class='header-left'>
        <!-- Replace with your icon component -->
      </div>

      <div class='header-right'>
        <!-- Replace with your icon components -->
      </div>
    </header>

    <aside id="sidebar">
      <div class='sidebar-title'>
        <div class='sidebar-brand'>
          <!-- Replace with your icon component -->
          SECURE AUTOMATION
        </div>

        <span class='icon close_icon'>X</span>
      </div>

      <ul class='sidebar-list'>
        <li class='sidebar-list-item'>
          <a href="">
            <!-- Replace with your icon component -->
            DASHBOARD
          </a>
        </li>
        <li class='sidebar-list-item'>
          <a href="">
            <!-- Replace with your icon component -->
            APPLICATIONS
          </a>
        </li>
        <li class='sidebar-list-item'>
          <a href="">
            <!-- Replace with your icon component -->
            USERS
          </a>
        </li>
        <li class='sidebar-list-item'>
          <a href="">
            <!-- Replace with your icon component -->
            EXCEPTIONS
          </a>
        </li>
        <li class='sidebar-list-item'>
          <a href="">
            <!-- Replace with your icon component -->
            KA PAGE
          </a>
        </li>
        <li class='sidebar-list-item'>
          <a href="">
            <!-- Replace with your icon component -->
            Reports
          </a>
        </li>
        <li class='sidebar-list-item'>
          <a href="">
            <!-- Replace with your icon component -->
            Settings
          </a>
        </li>
      </ul>
    </aside>

    <main class='main-container'>
      <!-- <div class='main-title'>
        <h3>DASHBOARD</h3>
      </div> -->
      <div id="dateContainer" >
      <div class="form-group">
        <label for="startDate">Start Date:</label>
        <input type="date" id="startDate" class="form-control">
      </div>

      <div class="form-group">
        <label for="endDate">End Date:</label>
        <input type="date" id="endDate" class="form-control">
      </div>

      <button class="btn btn-primary custom-submit-btn" onclick="updateCharts()">Submit</button>
    </div>
      <div class='main-cards'>
        <div class='card'>
          <div class="tabs">
          <div class='card-inner'>
            <button class="tab" onclick="showApplications()">APPLICATIONS</button>
            <i class='card_icon bi bi-grid-3x3-gap-fill'></i>
          </div>
          <h1>12</h1>
        </div></div>

        <div class='card'>
          <div class="tabs">
          <div class='card-inner'>
            <button class="tab" onclick="showRequests()">REQUESTS</button>
            <h1 id="dataList1" class="list-group"></h1>
            <i class='card_icon bi bi-archive-fill'></i>
          </div>
        </div>
        
        </div>
        

        

        <div class='card'>
          <div class="tabs">
          <div class='card-inner'>
            <button class="tab" onclick="showBenefit()">BENEFIT</button>
            <i class='card_icon bi bi-people-fill'></i>
          </div>
          <h1>33</h1>
        </div>

        </div>
      </div>

      <!-- <div class="form-group">
        <label for="startDate">Start Date:</label>
        <input type="date" id="startDate" class="form-control">
      </div>

      <div class="form-group">
        <label for="endDate">End Date:</label>
        <input type="date" id="endDate" class="form-control">
      </div>

      <button class="btn btn-primary custom-submit-btn" onclick="updateCharts()">Submit</button> -->

      

      <!-- <div class="charts-container"> -->
        <div id="dataContainer2" class="mt-4" style="display: none;">
          <h3>Information of Requests handled by Secure Automation</h3>
          <div id="dataTableContainer">
            <table id="dataList2Table" class="display">
              <!-- Data will be dynamically added here -->
            </table>
            <button id="downloadCSVBtn" class="btn btn-primary mt-2">Download CSV</button>
          </div>
        </div>
        

        
        <div className='charts'>
          <div id="chartsContainer" class="mt-4" style="display: none;">
          <div class='bar-chart-container'>
            <ResponsiveContainer width="100%" height="100%">
              <BarChart width={500} height={300} data={data} margin="{{ top:20 , right:30,left:20,bottom:5}}">
                <canvas id="barChart" width="500" height="300">
                  <CartesianGrid>
                    <XAxis dataKey="name" />
                    <YAxis />
                    <Tooltip />
                    <Bar dataKey="value" fill="#61dafb" />
    
                  </CartesianGrid>
                </canvas>
    
              </BarChart>
            </ResponsiveContainer>
          </div>
      
          <div class='pie-chart-container'>
            <ResponsiveContainer width="100%" height="100%">
              <PieChart width={500} height={300}>
                <canvas id="pieChart" width="500" height="300">
                  <Pie
                    dataKey="value"
                    isAnimationActive={false}
                    data={data}
                    cx="50%"
                    cy="50%"
                    outerRadius={80}
                    fill="#61dafb"
                    label>
                  </Pie>
                </canvas>
              </PieChart>
            </ResponsiveContainer>
          </div>
        </div>
      </div>
        




    <!-- </div> -->


    
    <!-- </div> -->

      
    </main>
  </div>


  <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/7.2.0/d3.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/echarts/5.2.2/echarts.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/echarts/5.2.2/extension/dataTool.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/echarts/5.2.2/extension/bmap.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/echarts/5.2.2/extension/wordcloud.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/echarts/5.2.2/extension/graphic.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/echarts/5.2.2/extension/bmap.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/echarts/5.2.2/extension/dataZoom.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/echarts/5.2.2/extension/calendar.min.js"></script>


  <script>
        function downloadCSV() {
        var table = document.getElementById("dataList2Table");
        var rows = table.getElementsByTagName("tr");
        var csv = [];

        for (var i = 0; i < rows.length; i++) {
          var row = [], cols = rows[i].querySelectorAll("td, th");
          for (var j = 0; j < cols.length; j++) {
            row.push(cols[j].innerText);
          }
          csv.push(row.join(","));
        }

        var csvContent = "data:text/csv;charset=utf-8," + csv.join("\n");
        var encodedUri = encodeURI(csvContent);
        var link = document.createElement("a");
        link.setAttribute("href", encodedUri);
        link.setAttribute("download", "table_data.csv");
        document.body.appendChild(link); // Required for FF
        link.click();
      }

    document.getElementById("downloadCSVBtn").addEventListener("click", downloadCSV);
     function showRequests() {
          // document.getElementById("dataContainer1").style.display = "block";
          // document.getElementById("dataContainer2").style.display = "none";
          // document.getElementById("dataContainer3").style.display = "none";
          // document.getElementById("infoTitle").innerText = "Requests handled by Secure Automation";
          var dataContainer2 =document.getElementById("dataContainer2");
          var charts = document.getElementById("chartsContainer");
          var dateContainer = document.getElementById("dateContainer");
          //Show dataContainer2
          dataContainer2.style.display = "block";
          dateContainer.style.display = "none";
          charts.style.display = "none";

          //Hide charts
          //  for(var i=0 ; i< charts.length;i++){
          //   charts[i].style.display = "none";
          //  }
      }
  
      function showApplications() {
          // document.getElementById("dataContainer1").style.display = "none";
          // document.getElementById("dataContainer2").style.display = "block";
          // document.getElementById("dataContainer3").style.display = "none";
          // document.getElementById("infoTitle").innerText = "Information of Applications";
          var dataContainer2 =document.getElementById("dataContainer2");
          // var dateContainer = document.getElementById("dateContainer");
          var charts = document.getElementById("chartsContainer");
          //Hide dataContainer2
          
          dataContainer2.style.display = "none";
          dateContainer.style.display = "block";
          charts.style.display = "block";
          // dataContainer2.style.display = "block";
          

          // SHOW charts
          //  for(var i=0 ; i< charts.length;i++){
          //   charts[i].style.display = "block";
          //  }
      }
  
      function showBenefit() {
          document.getElementById("dataContainer1").style.display = "none";
          document.getElementById("dataContainer2").style.display = "none";
          document.getElementById("dataContainer3").style.display = "block";
          document.getElementById("infoTitle").innerText = "Benefit of Automation";
      }

    // document.getElementById('startDate').addEventListener('change', updateCharts);
    // document.getElementById('endDate').addEventListener('change', updateCharts);

    document.getElementById('updateButton').addEventListener('click', updateCharts);

    // Fetch data from the server
    function fetchData() {
      // Add logic to fetch data based on the selected date range
      const startDate = document.getElementById('startDate').value;
      const endDate = document.getElementById('endDate').value;

      // Example URL for data fetching (modify as needed)
      const url = `/data?startDate=${startDate}&endDate=${endDate}`;

      fetch(url)
        .then(response => response.json())
        .then(data => {
          // Check if data is available
          if (data && data.data1 && data.data2) {
            const filteredData = data.data2.filter(item => {
              const createdDate = new Date(item.CREATED_DATE).toISOString().split('T')[0];
              return createdDate >= startDate && createdDate <= endDate;
            });
            // Display data for Data Set 1
            displayData('dataList1', data.data1);

            // Display data for Data Set 2
            displayDataTable('dataList2Table', filteredData);

            // Create Bar Chart
            createBarChart('barChart', filteredData);

            // Create Pie Chart
            createPieChart('pieChart', filteredData);
          } else {
            console.error('Data is missing or invalid.');
          }
        })
        .catch(error => console.error('Error fetching data:', error));
    }





    //Function to display data in DataTable Format
    function displayDataTable(tableId , data){
      // Destroy existing datatable if exists
      if ($.fn.DataTable.isDataTable(`#${tableId}`)) {
        $(`#${tableId}`).DataTable().destroy();
      }
      //Create a DataTable with paging

      $(`#${tableId}`).DataTable({
        data: data,
        columns: [
          {title: 'REQUESTNO', data: 'REQUESTNO'},
          {title: 'SUBREQUEST_NO', data: 'SUBREQUEST_NO'},
          {title: 'APPLICATIONNAME', data: 'APPLICATIONNAME'},
          {title: 'ENVIRONMENT', data: 'ENVIRONMENT'},
          {title: 'REQUESTED_FOR', data: 'REQUESTED_FOR'},
          {title: 'CREATED_DATE', data: 'CREATED_DATE'},
          {title: 'ROLE_NAME', data: 'ROLE_NAME'},
          {title: 'ROLE_STATUS', data: 'ROLE_STATUS'},
          {title: 'REQUEST_STATUS', data: 'REQUEST_STATUS'},
          {title: 'UPDATED_DATE', data: 'UPDATED_DATE'},
          {title: 'COMMENTS', data: 'COMMENTS'},
          {title: 'USER_TL_ID', data: 'USER_TL_ID'},
        ],
        pageLength:5, // number of requests per page
      });
    }
    // Function to update charts based on the selected date range
    function updateCharts() {
      fetchData();
    }
    // Fetch data from the server
    // fetch('/data')
    //   .then(response => response.json())
    //   .then(data => {
    //     // Check if data is available
    //     if (data && data.data1 && data.data2) {
    //       // Display data for Data Set 1
    //       displayDataF('dataList1', data.data1);
    //       // console.log(data.data2);

    //       // Display data for Data Set 2
    //       displayDataF('dataList2', data.data2);
		//   // Create Bar Chart
    //       createBarChart('barChart', data.data2);

    //       // Create Pie Chart
    //       createPieChart('pieChart', data.data2);
    //     } else {
    //       console.error('Data is missing or invalid.');
    //     }
    //   })
    //   .catch(error => console.error('Error fetching data:', error));



		function displayDataF(listId, data) {
      const dataListElement = document.getElementById(listId);

      // Check if data is available
      if (data && data.length > 0) {
        data.forEach(item => {
          // Create a list item
          const listItem = document.createElement('li');
          listItem.className = 'list-group-item';

          // Set the content of the list item based on all properties
          Object.keys(item).forEach(key => {
            listItem.innerHTML += `<strong>${key}:</strong> ${item[key]}<br>`;
          });

          // Append the list item to the ul element
          dataListElement.appendChild(listItem);
        });
      } else {
        // If no data is available, create a placeholder list item
        const listItem = document.createElement('li');
        listItem.className = 'list-group-item';
        listItem.textContent = 'No data available';
        dataListElement.appendChild(listItem);
      }
    }



      function displayData2(listId, data) {
      const dataListElement = document.getElementById(listId);

      // Check if data is available
      if (data && data.length > 0) {
        data.forEach(item => {
          // Create a list item
          const listItem = document.createElement('li');
          listItem.className = 'list-group-item';

          // Set the content of the list item based on all properties
          Object.keys(item).forEach(key => {
            listItem.innerHTML += `<strong>${key}:</strong> ${item[key]}<br>`;
          });

          // Append the list item to the ul element
          dataListElement.appendChild(listItem);
        });
      } else {
        // If no data is available, create a placeholder list item
        const listItem = document.createElement('li');
        listItem.className = 'list-group-item';
        listItem.textContent = 'No data available';
        dataListElement.appendChild(listItem);
      }
    }

    

    
    function displayData(listId, data) {
      const dataListElement = document.getElementById(listId);

      // Check if data is available
      if (data && data.length > 0) {
        data.forEach(item => {
          const listItem = document.createElement('li');
          const columnValue = data[0]['1'] || 'N/A';
          listItem.className = 'list-group-item';
          listItem.textContent = ` ${columnValue}`;
          dataListElement.appendChild(listItem);


          
          
          
          
          
        });
      } else {
        // If no data is available, create a placeholder list item
        const listItem = document.createElement('li');
        listItem.className = 'list-group-item';
        listItem.textContent = 'No data available';
        dataListElement.appendChild(listItem);
      }
    }


        function createBarChart(canvasId, data) {
      const canvas = document.getElementById(canvasId);
      const ctx = canvas.getContext('2d');

      // Group data by APPLICATIONNAME and REQUEST_STATUS
      const groupedData = data.reduce((acc, item) => {
        const appName = item.APPLICATIONNAME;
        const requestStatus = item.REQUEST_STATUS;
        
        if (!acc[appName]) {
          acc[appName] = {
            C: 0,
            RL: 0
          };
        }

        acc[appName][requestStatus]++;
        return acc;
      }, {});

      const labels = Object.keys(groupedData);
      const datasets = Object.entries(groupedData).map(([appName, counts]) => {
        return {
          label: appName,
          data: [counts.C, counts.RL],
          backgroundColor: [
            'rgba(75, 192, 192, 0.2)',
            'rgba(255, 99, 132, 0.2)'
          ],
          borderColor: [
            'rgba(75, 192, 192, 1)',
            'rgba(255, 99, 132, 1)'
          ],
          borderWidth: 1
        };
      });

      new Chart(ctx, {
        type: 'bar',
        data: {
          labels: ['C', 'RL'],
          datasets: datasets
        },
        options: {
          scales: {
            y: {
              beginAtZero: true
            }
          }
        }
      });
    }



	

      function createPieChart(canvasId, data) {
      const canvas = document.getElementById(canvasId);
      const ctx = canvas.getContext('2d');

      // Group data by APPLICATIONNAME and count occurrences
      const groupedData = data.reduce((acc, item) => {
        const appName = item.APPLICATIONNAME;
        acc[appName] = (acc[appName] || 0) + 1;
        return acc;
      }, {});

      const labels = Object.keys(groupedData);
      const values = Object.values(groupedData);

      new Chart(ctx, {
        type: 'pie',
        data: {
          labels: labels,
          datasets: [{
            data: values,
            backgroundColor: [
              'rgba(255, 99, 132, 0.2)',
              'rgba(54, 162, 235, 0.2)',
              'rgba(255, 206, 86, 0.2)',
              'rgba(75, 192, 192, 0.2)',
              'rgba(153, 102, 255, 0.2)',
              'rgba(255, 159, 64, 0.2)'
            ],
            borderColor: [
              'rgba(255, 99, 132, 1)',
              'rgba(54, 162, 235, 1)',
              'rgba(255, 206, 86, 1)',
              'rgba(75, 192, 192, 1)',
              'rgba(153, 102, 255, 1)',
              'rgba(255, 159, 64, 1)'
            ],
            borderWidth: 1
          }]
        }
      });
    }
  </script>
</body>
</html>
